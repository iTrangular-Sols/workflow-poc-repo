# status check function failure() -> returns true previous job / step is failed
# if success() -> success() is default behavior
# always() -> return true / always runs step / job regardless of status of previous job / step even if they are skipped
# cancelled() -> returns true if workflow is cancelled, runs step / job when workflow is cancelled
# to fail we can exit 1
# failure() -> returns true if any previous failed, we can also check which step / job is failed and only then run use conclusion

#timeout / continue on error - exclude a certain step from failing the workflow / job even if it fails, if:success() will run

name: Status check

on: [push]

jobs:
  job-1:
    runs-on: ubuntu-latest
    steps:
      - name: Step 1
        run: sleep 20
      - name: This is to fail
        id: step2
        continue-on-error: true
        run: exit 1
      - name: Runs on step 2 failure
        # if: failure()
        # below will run only on success() therefore override with failure() check
        # success() is applied to if by default
        if: failure() && steps.step2.conclusion == 'failure'
        run: echo 'runs only on failure of step 2'
      - name: Runs on failure
        if: failure()
        run: echo 'Failure'
      - name: Runs on success
        if: success()
        run: echo 'runs on success'
      - name: Always runs
        if: always()
        run: echo 'runs always'
      - name: Runs when cancelled
        if: cancelled()
        run: echo 'runs when cancelled'

  job-2:
    runs-on: ubuntu-latest
    needs: job-1
    if: failure()
    steps:
      - run: echo 'job-2 ran'
